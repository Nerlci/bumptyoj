// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  username       String?
  type           Int          @default(1)
  password       String
  classesTeacher Class[]      @relation(name: "Teacher")
  classesStudent Class[]      @relation(name: "Student")
  submission     Submission[]
  post           Post[]
  comment        Comment[]
  problemSets    ProblemSet[]
}

model Testdata {
  id             Int                @id @default(autoincrement())
  problem        Problem            @relation(fields: [problemId], references: [id])
  problemId      Int
  input          String
  output         String
  inputFilename  String
  outputFilename String
  detail         SubmissionDetail[]
}

model Problem {
  id              Int          @id @default(autoincrement())
  displayId       String
  title           String
  createdAt       DateTime     @default(now())
  difficulty      String
  time            Int
  memory          Int
  description     String       @db.Text
  inputFormat     String       @db.Text
  outputFormat    String       @db.Text
  sampleInput     String       @db.Text
  sampleOutput    String       @db.Text
  submissionCount Int
  acceptedCount   Int
  other           String       @db.Text
  testdata        Testdata[]
  submission      Submission[]
  problemSet      ProblemSet[]
}

model SubmissionDetail {
  id           Int        @id @default(autoincrement())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
  testdata     Testdata   @relation(fields: [testdataId], references: [id])
  testdataId   Int
  status       String
  score        Int
  time         Int
  memory       Int
}

model Submission {
  id           Int                @id @default(autoincrement())
  problem      Problem            @relation(fields: [problemId], references: [id])
  problemId    Int
  user         User               @relation(fields: [userId], references: [id])
  userId       Int
  problemSet   ProblemSet?        @relation(fields: [problemsetId], references: [id])
  problemsetId Int?
  language     String
  code         String             @db.Text
  length       Int
  status       String
  time         Int
  memory       Int
  score        Int
  timestamp    DateTime           @default(now())
  detail       SubmissionDetail[]
}

model Class {
  id          Int          @id @default(autoincrement())
  name        String
  teacher     User         @relation(name: "Teacher", fields: [teacherId], references: [id])
  teacherId   Int
  students    User[]       @relation(name: "Student")
  problemSets ProblemSet[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  category  String
  timestamp DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String   @db.Text
  timestamp DateTime @default(now())
}

model ProblemSet {
  id          Int          @id @default(autoincrement())
  title       String
  type        Int          @default(0) // 0: homework, 1: contest
  contestType Int          @default(0) // 0: OI, 1: ACM
  description String       @default("") @db.Text
  startTime   DateTime?
  endTime     DateTime?
  problems    Problem[]
  classes     Class[]
  users       User[]
  submissions Submission[]
}
